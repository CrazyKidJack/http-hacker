package ProxyFinder;

import Network.Proxy;
import Network.ProxyConfig;
import Utils.AI;
import Utils.Utils;
import burp.api.montoya.MontoyaApi;
import burp.api.montoya.http.message.HttpRequestResponse;
import burp.api.montoya.http.message.requests.HttpRequest;
import org.json.JSONObject;

import java.util.ArrayList;
import java.util.List;

public class ProxyFinder {

    private final MontoyaApi api;
    private final String prompt = "You are a web expert with a proficiency in HTTP. \n" +
            "You can identify and recognize different HTTP servers and proxies by looking at responses generated by them (body and headers).\n" +
            "\n" +
            "\n" +
            "You can also tell, just by observing the response headers and body obtained through a request to the domain, which is the server/proxy’s vendor (Nginx, Apache, IIS, Lightspeed, Tomcat, Express, CloudFlare, CloudFront, Akamai, HAProxy, Fastly, Next.js, Kestrel, etc), the proxy type (Load Balancer, Web Cache, WAF, Backend), and the technologies used if any (language, framework, libs, components, security mechanisms, etc).\n" +
            "\n" +
            "\n" +
            "You can also list known behaviours like the use of encodings or transformations in that specific proxy.\n" +
            "\n" +
            "Your task is to identify the proxy that generated the following responses.\n" +
            "Your input will be a JSON containing: \n" +
            "A list of responses that were generated by the same proxy. \n" +
            "A list of proxies that are sitting before the proxy being analyzed (they are forwarding requests and responses, and if a header or information related to them is found, it should be ignored). \n" +
            "\n" +
            "For example:\n" +
            "\n" +
            "{“samples”:[{“response”:”HTTP/1.1 200 OK\\r\\nX-Header: aaa…”}, {“response”:”HTTP/1.1 404 Not Found\\r\\nX-Header: aaa…”}], “proxyList”: [“CloudFlare”,“Nginx”]}\n" +
            "\n" +
            "Objective: Guess which proxy (Nginx, Apache, IIS, Lightspeed, Tomcat, Express, CloudFlare, CloudFront, Akamai, HAProxy, Fastly, Next.js, Kestrel, etc), the proxy type (Load Balancer, Web Cache, WAF, Backend) is generating these responses (give the most likely one). If not certain, give the most likely and set the certain attribute to false ,else put it in true.\n" +
            "Also, state which type of proxy this is (1:Load Balancer, 2:Web Cache, 3:WAF, 4:Backend, 5:other).\n" +
            "If the proxy/server uses a specific programming language, state it. If the proxy/server uses some frameworks, state them as a list.\n" +
            "\n" +
            "As this is not the only proxy in the network, some headers could be confusing as they were generated in other components. To solve this I will also provide a list of proxies that are sitting between the client and the proxy that generated the response. If you see headers for any of these proxies, ignore them, as there must not be repetitions. You cant guess a proxy vendor that is already on the proxyList.\n" +
            "\n" +
            "Your output should always be JUST AND ONLY a JSON object in the format:\n" +
            "\n" +
            "{“certain”: true/false, “vendor”: “<String:vendor_name>”, “type”:<Int:proxy_type_ID>, “technologies”: “<String:description_of_the_technology>”}\n" +
            "\n" +
            "For example, if you see that the response contains headers that you are sure are related only with Nginx working as a reverse proxy, your answer should be:\n" +
            "\n" +
            "{“certain”: true, “vendor”: “Nginx”, “type”:1, “technologies”: “”}\n" +
            "\n" +
            "Remember, your answer is going to be processed completely as a JSON object, so don't include any other text or comment. So the answer is ALWAYS a JSON object with the attributes “certain” (boolean), “vendor” (string), “type” (int), and “technologies” (string).\n" +
            "\n" +
            "Here is your input:\n" +
            "\n";


    public ProxyFinder(MontoyaApi api){
        this.api = api;
    }

    public List<Proxy> findProxies(List<HttpRequest> requestsList){
        List<Proxy> network = new ArrayList<>();
        for (HttpRequest baseRequest : requestsList) {
            HttpRequestResponse reqResp1 = Utils.sendHTTPRequest(api, baseRequest, 1);
            if (reqResp1 != null) {
                mergeSampleProxies(network, getResponseGroups(reqResp1.request()), reqResp1.request().pathWithoutQuery());
            }
        }
        AI ai = new AI(api);
        for (Proxy proxy : network){
            detectProxyConfig(proxy, ai, new ArrayList<>());
        }
        return network;
    }


    public void mergeSampleProxies(List<Proxy> proxyList, List<List<RequestSamples>> proxySamples, String path){
        for (int i = 0; i< proxySamples.size(); i++){
            boolean exists = false;
            for (Proxy proxyA : proxyList) {
                if (proxyA.getSamples() != null && !proxyA.getSamples().isEmpty() && RequestGrouper.areSameGroup(proxyA.getSamples(), proxySamples.get(i))) {
                    exists = true;
                    //proxyA.addSamples(proxySamples.get(i));
                    proxyA.mergePath(path);
                    //proxyList = proxyA.getChildren();
                    break;
                }
            }
            if (!exists){
                //proxyList.add(new Proxy(proxySamples.subList(i, proxySamples.size()), path));
                break;
            }
        }
    }


    public List<List<RequestSamples>> getResponseGroups(HttpRequest req){
        List<RequestSamples> testSamples = new ArrayList<>();
        ProxyFuzzers fuzzer = new ProxyFuzzers(this.api);
        testSamples.addAll(fuzzer.fuzzCLHeader(req));
        testSamples.addAll(fuzzer.fuzzHeaderName(req));
        testSamples.addAll(fuzzer.fuzzHostHeader(req));
        testSamples.addAll(fuzzer.fuzzMethodd(req));
        testSamples.addAll(fuzzer.fuzzTEChunk(req));
        testSamples.addAll(fuzzer.fuzzUpgradeHeader(req));
        testSamples.addAll(fuzzer.fuzzTEHeader(req));
        testSamples.addAll(fuzzer.fuzzURL(req));
        testSamples.addAll(fuzzer.fuzzHTTP2(req));

        List<List<RequestSamples>> out = new ArrayList<>();
        List<List<RequestSamples>> groupedSamples = RequestGrouper.clusterAndSortRequestSamples(testSamples);
        for (List<RequestSamples> sampleList : groupedSamples){
            List<RequestSamples> sampleOut = new ArrayList<>();
            for (RequestSamples rs : sampleList){
                if (!sampleOut.contains(rs)) sampleOut.add(rs);
            }
            out.add(sampleOut);
        }

        return  out;
    }

    public void detectProxyConfig(Proxy proxy, AI ai, List<String> proxyList){
        StringBuilder json = new StringBuilder("{\"samples\":[");
        for (RequestSamples reqSamp : proxy.getSamples()){
            json.append("{\"response\":\"");
            json.append(reqSamp.getBaseReqResp().response().toString().replace("\"", "'"));
            json.append("\"},");
        }
        json.append("]");
        if (!proxyList.isEmpty()) {
            json.append("\"proxyList\":[");
            for (String name : proxyList) {
                json.append("\"");
                json.append(name);
                json.append("\",");
            }
            json.append("]");
        }
        json.append("}");
        ai.setPrompt(this.prompt+json);
        boolean success = false;
        List<String> parentList = new ArrayList<>(proxyList);
        while (!success) {
            try {
                JSONObject jsonObject = new JSONObject(ai.execute());
                ProxyConfig config = new ProxyConfig();
                if (jsonObject.getBoolean("certain")) {
                    config.setName(jsonObject.getString("vendor"));
                    config.setVendor(jsonObject.getString("vendor"));
                } else {
                    config.setName("G:" + jsonObject.getString("vendor"));
                    config.setVendor("G:" + jsonObject.getString("vendor"));
                }
                config.setDescription(jsonObject.getString("technologies"));

                success = true;
                //proxy.setConfig(config);
                parentList.add(jsonObject.getString("vendor"));
            } catch (Exception e){}
        }
      /*  for (Proxy p : proxy.getChildren()){
            detectProxyConfig(p, ai, parentList);
        }*/
    }
}
